/* tslint:disable */
// generated by typescript-json-validator
import { inspect } from "util";
import Ajv from "ajv";
import BlogSchema from "./blog.schema";
export const ajv = new Ajv({
  allErrors: true,
  coerceTypes: false,
  format: "fast",
  nullable: true,
  unicode: true,
  uniqueItems: true,
  useDefaults: true,
});

ajv.addMetaSchema(require("ajv/lib/refs/json-schema-draft-06.json"));

export { BlogSchema };
//TODO: change values
export const BLogSchemaSchema = {
  $schema: "http://json-schema.org/draft-07/schema#",
  defaultProperties: [],
  definitions: {},
  properties: {
    blog_id: {
      type: "string",
    },
    markdown_content: {
      type: "string",
    },
    preview_headline: {
      type: "string",
    },
    preview_subtitle: {
      type: "string",
    },
  },
  required: [
    "blog_id",
    "markdown_content",
    "preview_headline",
    "preview_subtitle",
  ],
  type: "object",
};
export type ValidateFunction<T> = ((data: unknown) => data is T) &
  Pick<Ajv.ValidateFunction, "errors">;
export const isExchangeSchema = ajv.compile(
  BLogSchemaSchema
) as ValidateFunction<BlogSchema>;
export default function validate(value: unknown): BlogSchema {
  if (isExchangeSchema(value)) {
    return value;
  } else {
    throw new Error(
      ajv.errorsText(
        isExchangeSchema.errors!.filter((e: any) => e.keyword !== "if"),
        { dataVar: "ExchangeSchema" }
      ) +
        "\n\n" +
        inspect(value)
    );
  }
}
