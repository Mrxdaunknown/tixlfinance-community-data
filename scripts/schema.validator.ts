/* tslint:disable */
// generated by typescript-json-validator
import {inspect} from 'util';
import Ajv from 'ajv';
import TokenInformationSchema from './schema';
export const ajv = new Ajv({"allErrors":true,"coerceTypes":false,"format":"fast","nullable":true,"unicode":true,"uniqueItems":true,"useDefaults":true});

ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));

export {TokenInformationSchema};
export const TokenInformationSchemaSchema = {
  "$schema": "http://json-schema.org/draft-07/schema#",
  "defaultProperties": [
  ],
  "definitions": {
    "BlockchainSchema": {
      "defaultProperties": [
      ],
      "properties": {
        "explorer": {
          "format": "url",
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "explorer",
        "name"
      ],
      "type": "object"
    },
    "SocialSchema": {
      "defaultProperties": [
      ],
      "properties": {
        "handle": {
          "type": "string"
        },
        "name": {
          "enum": [
            "Medium",
            "Reddit",
            "Telegram",
            "Twitter",
            "Youtube"
          ],
          "type": "string"
        },
        "url": {
          "format": "url",
          "type": "string"
        }
      },
      "required": [
        "handle",
        "name",
        "url"
      ],
      "type": "object"
    },
    "TokenomicsSchema": {
      "defaultProperties": [
      ],
      "properties": {
        "circulating_supply": {
          "type": "number"
        },
        "max_supply": {
          "type": "number"
        },
        "total_supply": {
          "type": "number"
        }
      },
      "type": "object"
    }
  },
  "properties": {
    "blockchains": {
      "items": {
        "$ref": "#/definitions/BlockchainSchema"
      },
      "minItems": 1,
      "type": "array"
    },
    "coin_api_asset_id": {
      "type": "string"
    },
    "coingecko_asset_id": {
      "type": "string"
    },
    "description": {
      "maximum": 100,
      "minimum": 1,
      "type": "string"
    },
    "name": {
      "type": "string"
    },
    "socials": {
      "items": {
        "$ref": "#/definitions/SocialSchema"
      },
      "minItems": 1,
      "type": "array"
    },
    "source_code": {
      "format": "url",
      "type": "string"
    },
    "symbol": {
      "type": "string"
    },
    "tokenomics": {
      "$ref": "#/definitions/TokenomicsSchema"
    },
    "website": {
      "format": "url",
      "type": "string"
    },
    "white_paper": {
      "format": "url",
      "type": "string"
    }
  },
  "required": [
    "blockchains",
    "name",
    "socials",
    "symbol",
    "tokenomics",
    "website"
  ],
  "type": "object"
};
export type ValidateFunction<T> = ((data: unknown) => data is T) & Pick<Ajv.ValidateFunction, 'errors'>
export const isTokenInformationSchema = ajv.compile(TokenInformationSchemaSchema) as ValidateFunction<TokenInformationSchema>;
export default function validate(value: unknown): TokenInformationSchema {
  if (isTokenInformationSchema(value)) {
    return value;
  } else {
    throw new Error(
      ajv.errorsText(isTokenInformationSchema.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'TokenInformationSchema'}) +
      '\n\n' +
      inspect(value),
    );
  }
}
