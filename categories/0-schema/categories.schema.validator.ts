/* tslint:disable */
// generated by typescript-json-validator
import { inspect } from "util";
import Ajv from "ajv";
import CategoriesSchema from "categories/0-schema/categories.schema";
export const ajv = new Ajv({
  allErrors: true,
  coerceTypes: false,
  format: "fast",
  nullable: true,
  unicode: true,
  uniqueItems: true,
  useDefaults: true,
});

ajv.addMetaSchema(require("ajv/lib/refs/json-schema-draft-06.json"));

export { CategoriesSchema };
//TODO: change values
export const CategoriesSchemaSchema = {
  $schema: "http://json-schema.org/draft-07/schema#",
  defaultProperties: [],
  definitions: {},
  properties: {
    tag: {
      type: "string",
    },
    category_id: {
      type: "string",
    },
    description: {
      type: "string",
    },
  },
  required: ["tag", "category_id"],
  type: "object",
};
export type ValidateFunction<T> = ((data: unknown) => data is T) &
  Pick<Ajv.ValidateFunction, "errors">;
export const isCategoriesSchema = ajv.compile(
  CategoriesSchemaSchema
) as ValidateFunction<CategoriesSchema>;
export default function validate(value: unknown): CategoriesSchema {
  if (isCategoriesSchema(value)) {
    return value;
  } else {
    throw new Error(
      ajv.errorsText(
        isCategoriesSchema.errors!.filter((e: any) => e.keyword !== "if"),
        { dataVar: "CategoriesSchema" }
      ) +
        "\n\n" +
        inspect(value)
    );
  }
}
