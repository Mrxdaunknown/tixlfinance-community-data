/* tslint:disable */
// generated by typescript-json-validator
import { inspect } from 'util';
import Ajv from 'ajv';
import ProjectSchema from './project.schema';
export const ajv = new Ajv({
  allErrors: true,
  coerceTypes: false,
  format: 'fast',
  nullable: true,
  unicode: true,
  uniqueItems: true,
  useDefaults: true,
});

ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));

export { ProjectSchema };
export const ProjectSchemaSchema = {
  $schema: 'http://json-schema.org/draft-07/schema#',
  defaultProperties: [],
  definitions: {
    SocialSchema: {
      defaultProperties: [],
      properties: {
        name: {
          enum: [
            'Facebook',
            'Medium',
            'Reddit',
            'Telegram',
            'Twitter',
            'Youtube',
          ],
          type: 'string',
        },
        search_strings: {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        url: {
          format: 'url',
          type: 'string',
        },
        handle: {
          type: 'string',
        },
      },
      required: ['name', 'url'],
      type: 'object',
    },
    TokenomicsSchema: {
      defaultProperties: [],
      properties: {
        circulating_supply: {
          type: 'number',
        },
        max_supply: {
          type: 'number',
        },
        total_supply: {
          type: 'number',
        },
      },
      type: 'object',
    },
    TradingPair: {
      defaultProperties: [],
      properties: {
        base: {
          type: 'string',
        },
        exchange_id: {
          type: 'string',
        },
        pair_id: {
          type: 'string',
        },
        quote: {
          type: 'string',
        },
      },
      required: ['base', 'exchange_id', 'pair_id', 'quote'],
      type: 'object',
    },
  },
  properties: {
    coin_api_id: {
      type: 'string',
    },
    coingecko_id: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
    socials: {
      items: {
        $ref: '#/definitions/SocialSchema',
      },
      minItems: 1,
      type: 'array',
    },
    source_code: {
      format: 'url',
      type: 'string',
    },
    symbol: {
      type: 'string',
    },
    additionalSymbols: {
      items: {
        type: 'string',
      },
      type: 'array',
    },
    tokenomics: {
      $ref: '#/definitions/TokenomicsSchema',
    },
    tokenomics_url: {
      type: 'string',
    },
    trading_pairs: {
      items: {
        $ref: '#/definitions/TradingPair',
      },
      type: 'array',
    },
    website: {
      format: 'url',
      type: 'string',
    },
    white_paper: {
      format: 'url',
      type: 'string',
    },
  },
  required: [
    'name',
    'socials',
    'symbol',
    'tokenomics',
    'trading_pairs',
    'website',
  ],
  type: 'object',
};
export type ValidateFunction<T> = ((data: unknown) => data is T) &
  Pick<Ajv.ValidateFunction, 'errors'>;
export const isProjectSchema = ajv.compile(
  ProjectSchemaSchema
) as ValidateFunction<ProjectSchema>;
export default function validate(value: unknown): ProjectSchema {
  if (isProjectSchema(value)) {
    return value;
  } else {
    throw new Error(
      ajv.errorsText(
        isProjectSchema.errors!.filter((e: any) => e.keyword !== 'if'),
        { dataVar: 'ProjectSchema' }
      ) +
        '\n\n' +
        inspect(value)
    );
  }
}
